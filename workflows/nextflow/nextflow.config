// Nextflow configuration file for bioinformatics project

// Global settings
manifest {
    name = 'Bioinformatics Analysis Pipeline'
    author = 'bioinfo-project'
    homePage = 'https://github.com/bioinfo-project'
    description = 'Comprehensive bioinformatics analysis workflow'
    version = '1.0.0'
    nextflowVersion = '>=23.04.0'
    defaultBranch = 'main'
}

// Default parameters
params {
    // Input/Output
    input = null
    outdir = 'results'
    
    // Reference data
    genome = null
    gtf = null
    
    // Analysis options
    skip_qc = false
    skip_trimming = false
    skip_alignment = false
    
    // Resource defaults
    max_memory = '8.GB'
    max_cpus = 4
    max_time = '24.h'
    
    // Pipeline options
    help = false
    publish_dir_mode = 'copy'
    email = null
    email_on_fail = null
    plaintext_email = false
    monochrome_logs = false
    
    // Config files
    custom_config_version = 'master'
    custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact = null
    config_profile_url = null
    config_profile_name = null
}

// Load base configuration
includeConfig 'configs/base.config'

// Profile configurations
profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    
    conda {
        params.enable_conda = true
        docker.enabled = false
        singularity.enabled = false
        podman.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
    }
    
    mamba {
        params.enable_conda = true
        conda.useMamba = true
        docker.enabled = false
        singularity.enabled = false
        podman.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
    }
    
    docker {
        docker.enabled = true
        docker.userEmulation = true
        singularity.enabled = false
        podman.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
    }
    
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        docker.enabled = false
        podman.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
    }
    
    podman {
        podman.enabled = true
        docker.enabled = false
        singularity.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
    }
    
    test { includeConfig 'configs/test.config' }
    hpc { includeConfig 'configs/hpc.config' }
    cloud { includeConfig 'configs/cloud.config' }
}

// Export variables
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER = "/.Rprofile"
    R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings
nextflow.enable.configProcessNamesValidation = false

// Timeline, report and trace
timeline {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_timeline.html"
}
report {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_report.html"
}
trace {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_trace.txt"
}
dag {
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_dag.html"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

