/*
========================================================================================
    Cloud config file
========================================================================================
    Configuration for running on cloud platforms (AWS, Google Cloud, Azure)
----------------------------------------------------------------------------------------
*/

params {
    // Cloud-specific parameters
    max_memory                 = '64.GB'
    max_cpus                   = 16
    max_time                   = '48.h'
    
    // AWS settings
    aws_region                 = 'us-east-1'
    aws_queue                  = null
    aws_cli_path               = '/home/ec2-user/miniconda/bin/aws'
    
    // Google Cloud settings
    google_project             = null
    google_zone                = 'us-central1-a'
    
    // Azure settings
    azure_subscription         = null
    azure_resource_group       = null
}

// AWS Batch configuration
aws {
    batch {
        // Batch queue and job definition
        cliPath = params.aws_cli_path
        region = params.aws_region
        
        // Job role and compute environment
        jobRole = 'arn:aws:iam::YOUR_ACCOUNT:role/BatchExecutionRole'
        jobQueue = params.aws_queue
        
        // Retry configuration
        maxParallelTransfers = 16
        maxTransferAttempts = 3
        delayBetweenAttempts = '30 sec'
    }
    
    client {
        maxConnections = 20
        connectionTimeout = '30 sec'
        uploadStorageClass = 'STANDARD_IA'
        storageEncryption = 'AES256'
    }
}

// Google Cloud configuration
google {
    project = params.google_project
    zone = params.google_zone
    
    lifeSciences {
        // Preemptible instances for cost savings
        preemptible = true
        
        // Boot disk settings
        bootDiskSize = '20.GB'
        
        // Network settings
        network = 'default'
        subnetwork = 'default'
        usePrivateAddress = false
    }
}

// Process configuration for cloud
process {
    
    // Default executor based on platform
    executor = 'awsbatch'  // Change to 'google-lifesciences' for GCP
    
    // Cloud-optimized resource allocation
    withLabel:process_single {
        cpus   = 1
        memory = { check_max( 4.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 2.h  * task.attempt, 'time'    ) }
        
        // AWS instance types
        machineType = 't3.medium'
        
        // Spot instances for cost savings
        spot = true
    }
    
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 8.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
        
        machineType = 'c5.large'
        spot = true
    }
    
    withLabel:process_medium {
        cpus   = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
        
        machineType = 'c5.xlarge'
        spot = true
    }
    
    withLabel:process_high {
        cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
        
        machineType = 'c5.2xlarge'
        spot = true
    }
    
    withLabel:process_high_memory {
        cpus   = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory = { check_max( 64.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 12.h  * task.attempt, 'time'    ) }
        
        machineType = 'r5.xlarge'
        spot = false  // Memory-intensive jobs may need on-demand
    }
    
    // Tool-specific cloud settings
    withName:'STAR_.*' {
        cpus   = { check_max( 8     * task.attempt, 'cpus'     ) }
        memory = { check_max( 32.GB * task.attempt, 'memory'   ) }
        time   = { check_max( 8.h   * task.attempt, 'time'     ) }
        
        machineType = 'c5.2xlarge'
        spot = true
        
        // Disk space for indices
        disk = '100.GB'
    }
    
    withName:'GATK4_.*' {
        cpus   = { check_max( 4     * task.attempt, 'cpus'     ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'   ) }
        time   = { check_max( 12.h  * task.attempt, 'time'     ) }
        
        machineType = 'c5.xlarge'
        spot = false  // GATK can be sensitive to interruptions
    }
    
    withName:SALMON_QUANT {
        cpus   = { check_max( 4     * task.attempt, 'cpus'     ) }
        memory = { check_max( 8.GB  * task.attempt, 'memory'   ) }
        time   = { check_max( 4.h   * task.attempt, 'time'     ) }
        
        machineType = 'c5.large'
        spot = true
    }
}

// Container settings for cloud
docker {
    enabled = true
    temp = 'auto'
    
    // Registry optimization
    registry = 'public.ecr.aws'  // For AWS
    // registry = 'gcr.io'       // For Google Cloud
    // registry = 'mcr.microsoft.com'  // For Azure
}

// Disable other container engines
singularity.enabled = false
podman.enabled = false

// Work directory in cloud storage
workDir = 's3://your-nextflow-bucket/work'  // For AWS
// workDir = 'gs://your-nextflow-bucket/work'  // For Google Cloud
// workDir = 'az://your-nextflow-container/work'  // For Azure

// Fusion file system (AWS)
fusion {
    enabled = true
    exportStorageCredentials = true
}

// Wave container service
wave {
    enabled = true
    endpoint = 'https://wave.seqera.io'
}

// Tower/Seqera Platform integration
tower {
    accessToken = null  // Set via environment variable TOWER_ACCESS_TOKEN
    workspaceId = null  // Set via environment variable TOWER_WORKSPACE_ID
}

// Cloud-specific optimizations
env {
    // AWS credentials
    AWS_DEFAULT_REGION = params.aws_region
    
    // Optimize for cloud networking
    NXF_ANSI_LOG = false
    NXF_OPTS = '-Xms1g -Xmx4g'
}

